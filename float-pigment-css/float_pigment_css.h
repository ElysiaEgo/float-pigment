// Copyright 2024 wechat-miniprogram. MIT license.
#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>


namespace float_pigment {
struct Length;
struct SelectorFragment;
struct Number;
struct Angle;
struct CalcExpr;


static const uint16_t TEMP_SHEET_INDEX = UINT16_MAX;

enum class AnimationDirectionItem {
  Normal,
  Reverse,
  Alternate,
  AlternateReverse,
};

enum class AnimationFillModeItem {
  None,
  Forwards,
  Backwards,
  Both,
};

enum class AnimationPlayStateItem {
  Running,
  Paused,
};

enum class AttributeFlags {
  CaseSensitivityDependsOnName,
  CaseSensitive,
  CaseInsensitive,
};

enum class AttributeOperator {
  Set,
  Exact,
  List,
  Hyphen,
  Begin,
  End,
  Contain,
};

enum class BackgroundAttachmentItem {
  Scroll,
  Fixed,
  Local,
};

enum class BackgroundClipItem {
  BorderBox,
  PaddingBox,
  ContentBox,
  Text,
};

enum class BackgroundOriginItem {
  BorderBox,
  PaddingBox,
  ContentBox,
};

enum class BackgroundRepeatValue {
  Repeat,
  NoRepeat,
  Space,
  Round,
};

enum class ContainKeyword {
  Size,
  Layout,
  Style,
  Paint,
};

enum class FfiErrorCode {
  None,
  NullPointer,
  InvalidPath,
  Unknown,
};

enum class FontDisplay {
  Auto,
  Block,
  Swap,
  Fallback,
  Optional,
};

enum class GradientShape {
  Ellipse,
  Circle,
};

enum class ImageTags {
  LTR,
  RTL,
};

enum class MaskModeItem {
  MatchSource,
  Alpha,
  Luminance,
};

enum class MediaType {
  None,
  All,
  Screen,
};

enum class MediaTypeDecorator {
  None,
  Not,
  Only,
};

enum class Orientation {
  None,
  Portrait,
  Landscape,
};

enum class PseudoElementsType {
  None,
  Invalid,
  Before,
  After,
};

enum class StepPosition {
  End,
  JumpStart,
  JumpEnd,
  JumpNone,
  JumpBoth,
  Start,
};

enum class TextDecorationLineItem {
  Overline,
  LineThrough,
  Underline,
  Blink,
};

enum class Theme {
  None,
  Light,
  Dark,
};

enum class TransitionPropertyItem {
  None,
  Transform,
  TransformOrigin,
  LineHeight,
  Opacity,
  All,
  Height,
  Width,
  MinHeight,
  MaxHeight,
  MinWidth,
  MaxWidth,
  MarginTop,
  MarginRight,
  MarginLeft,
  MarginBottom,
  Margin,
  PaddingTop,
  PaddingRight,
  PaddingBottom,
  PaddingLeft,
  Padding,
  Top,
  Right,
  Bottom,
  Left,
  FlexGrow,
  FlexShrink,
  FlexBasis,
  Flex,
  BorderTopWidth,
  BorderRightWidth,
  BorderBottomWidth,
  BorderLeftWidth,
  BorderTopColor,
  BorderRightColor,
  BorderBottomColor,
  BorderLeftColor,
  BorderTopLeftRadius,
  BorderTopRightRadius,
  BorderBottomLeftRadius,
  BorderBottomRightRadius,
  Border,
  BorderWidth,
  BorderColor,
  BorderRadius,
  BorderLeft,
  BorderTop,
  BorderRight,
  BorderBottom,
  Font,
  ZIndex,
  BoxShadow,
  BackdropFilter,
  Filter,
  Color,
  TextDecorationColor,
  TextDecorationThickness,
  FontSize,
  FontWeight,
  LetterSpacing,
  WordSpacing,
  BackgroundColor,
  BackgroundPosition,
  BackgroundSize,
  Background,
  BackgroundPositionX,
  BackgroundPositionY,
  Mask,
  MaskSize,
  MaskPositionX,
  MaskPositionY,
  MaskPosition,
};

enum class WarningKind : uint32_t {
  Unknown = 65536,
  HooksGenerated,
  SerializationFailed,
  DeserializationFailed,
  UnsupportedSegment,
  UnknownAtBlock,
  InvalidMediaExpression,
  UnsupportedMediaSyntax,
  InvalidImportURL,
  MissingImportTarget,
  RecursiveImports,
  ImportNotOnTop,
  IllegalKeyframesBlock,
  IllegalKeyframesIdentifier,
  UnsupportedKeyframesSyntax,
  InvalidFontFaceProperty,
  InvalidSelector,
  UnsupportedSelector,
  InvalidPseudoElement,
  UnsupportedPseudoElement,
  InvalidPseudoClass,
  UnsupportedPseudoClass,
  InvalidProperty,
  UnsupportedProperty,
  MissingColonAfterProperty,
  InvalidEnvDefaultValue,
};

using NullPtr = const void*;

template<typename T>
struct FfiResult {
  T value;
  FfiErrorCode err;
};

struct StrRef {
  size_t offset;
  size_t len;
  void *ptr;
};

template<typename T>
struct Array {
  T *ptr;
  size_t len;
};

struct Warning {
  WarningKind kind;
  StrRef message;
  uint32_t start_line;
  uint32_t start_col;
  uint32_t end_line;
  uint32_t end_col;
};

using BufferPtr = uint8_t*;

template<typename T>
struct Box {
  T *ptr;
};

struct DisplayType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    None,
    Block,
    Flex,
    Inline,
    InlineBlock,
    Grid,
    FlowRoot,
    InlineFlex,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct PositionType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Static,
    Relative,
    Absolute,
    Fixed,
    Sticky,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct OverflowType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Visible,
    Hidden,
    Auto,
    Scroll,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct PointerEventsType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Auto,
    None,
    WxRoot,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct WxEngineTouchEventType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Gesture,
    Click,
    None,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct LengthExpr {
  enum class Tag {
    Invalid,
    Env,
    Calc,
  };

  struct Env_Body {
    StrRef _0;
    Box<Length> _1;
  };

  struct Calc_Body {
    Box<CalcExpr> _0;
  };

  Tag tag;
  union {
    Env_Body env;
    Calc_Body calc;
  };
};

struct Length {
  enum class Tag {
    Undefined,
    Auto,
    Px,
    Vw,
    Vh,
    Rem,
    Rpx,
    Em,
    Ratio,
    Expr,
    Vmin,
    Vmax,
  };

  struct Px_Body {
    float _0;
  };

  struct Vw_Body {
    float _0;
  };

  struct Vh_Body {
    float _0;
  };

  struct Rem_Body {
    float _0;
  };

  struct Rpx_Body {
    float _0;
  };

  struct Em_Body {
    float _0;
  };

  struct Ratio_Body {
    float _0;
  };

  struct Expr_Body {
    LengthExpr _0;
  };

  struct Vmin_Body {
    float _0;
  };

  struct Vmax_Body {
    float _0;
  };

  Tag tag;
  union {
    Px_Body px;
    Vw_Body vw;
    Vh_Body vh;
    Rem_Body rem;
    Rpx_Body rpx;
    Em_Body em;
    Ratio_Body ratio;
    Expr_Body expr;
    Vmin_Body vmin;
    Vmax_Body vmax;
  };
};

struct Number {
  enum class Tag {
    F32,
    I32,
    Calc,
  };

  struct F32_Body {
    float _0;
  };

  struct I32_Body {
    int32_t _0;
  };

  struct Calc_Body {
    Box<CalcExpr> _0;
  };

  Tag tag;
  union {
    F32_Body f32;
    I32_Body i32;
    Calc_Body calc;
  };
};

struct Angle {
  enum class Tag {
    Deg,
    Grad,
    Rad,
    Turn,
    Calc,
  };

  struct Deg_Body {
    float _0;
  };

  struct Grad_Body {
    float _0;
  };

  struct Rad_Body {
    float _0;
  };

  struct Turn_Body {
    float _0;
  };

  struct Calc_Body {
    Box<CalcExpr> _0;
  };

  Tag tag;
  union {
    Deg_Body deg;
    Grad_Body grad;
    Rad_Body rad;
    Turn_Body turn;
    Calc_Body calc;
  };
};

struct CalcExpr {
  enum class Tag {
    Length,
    Number,
    Angle,
    Plus,
    Sub,
    Mul,
    Div,
  };

  struct Length_Body {
    Box<Length> _0;
  };

  struct Number_Body {
    Box<Number> _0;
  };

  struct Angle_Body {
    Box<Angle> _0;
  };

  struct Plus_Body {
    Box<CalcExpr> _0;
    Box<CalcExpr> _1;
  };

  struct Sub_Body {
    Box<CalcExpr> _0;
    Box<CalcExpr> _1;
  };

  struct Mul_Body {
    Box<CalcExpr> _0;
    Box<CalcExpr> _1;
  };

  struct Div_Body {
    Box<CalcExpr> _0;
    Box<CalcExpr> _1;
  };

  Tag tag;
  union {
    Length_Body length;
    Number_Body number;
    Angle_Body angle;
    Plus_Body plus;
    Sub_Body sub;
    Mul_Body mul;
    Div_Body div;
  };
};

struct NumberType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    F32,
    I32,
    Calc,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct F32_Body {
    float _0;
  };

  struct I32_Body {
    int32_t _0;
  };

  struct Calc_Body {
    Box<CalcExpr> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    F32_Body f32;
    I32_Body i32;
    Calc_Body calc;
  };
};

struct BoxSizingType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    ContentBox,
    PaddingBox,
    BorderBox,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct TransformItem {
  enum class Tag {
    None,
    Matrix,
    Matrix3D,
    Translate2D,
    Translate3D,
    Scale2D,
    Scale3D,
    Rotate2D,
    Rotate3D,
    Skew,
    Perspective,
  };

  struct Matrix_Body {
    float _0[6];
  };

  struct Matrix3D_Body {
    float _0[16];
  };

  struct Translate2D_Body {
    Length _0;
    Length _1;
  };

  struct Translate3D_Body {
    Length _0;
    Length _1;
    Length _2;
  };

  struct Scale2D_Body {
    float _0;
    float _1;
  };

  struct Scale3D_Body {
    float _0;
    float _1;
    float _2;
  };

  struct Rotate2D_Body {
    Angle _0;
  };

  struct Rotate3D_Body {
    float _0;
    float _1;
    float _2;
    Angle _3;
  };

  struct Skew_Body {
    Angle _0;
    Angle _1;
  };

  struct Perspective_Body {
    Length _0;
  };

  Tag tag;
  union {
    Matrix_Body matrix;
    Matrix3D_Body matrix3_d;
    Translate2D_Body translate2_d;
    Translate3D_Body translate3_d;
    Scale2D_Body scale2_d;
    Scale3D_Body scale3_d;
    Rotate2D_Body rotate2_d;
    Rotate3D_Body rotate3_d;
    Skew_Body skew;
    Perspective_Body perspective;
  };
};

struct TransformType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Series,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Series_Body {
    Array<TransformItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Series_Body series;
  };
};

struct FloatType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    None,
    Left,
    Right,
    InlineStart,
    InlineEnd,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct OverflowWrapType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Normal,
    BreakWord,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct ResizeType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    None,
    Both,
    Horizontal,
    Vertical,
    Block,
    Inline,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct ZIndexType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Auto,
    Num,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Num_Body {
    Number _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Num_Body num;
  };
};

struct VisibilityType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Visible,
    Hidden,
    Collapse,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct ColorType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Undefined,
    CurrentColor,
    Specified,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Specified_Body {
    uint8_t _0;
    uint8_t _1;
    uint8_t _2;
    uint8_t _3;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Specified_Body specified;
  };
};

struct FlexDirectionType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Row,
    RowReverse,
    Column,
    ColumnReverse,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct FlexWrapType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    NoWrap,
    Wrap,
    WrapReverse,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct AlignItemsType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Stretch,
    Normal,
    Center,
    Start,
    End,
    FlexStart,
    FlexEnd,
    SelfStart,
    SelfEnd,
    Baseline,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct AlignSelfType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Auto,
    Normal,
    Stretch,
    Center,
    Start,
    End,
    SelfStart,
    SelfEnd,
    FlexStart,
    FlexEnd,
    Baseline,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct AlignContentType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Normal,
    Start,
    End,
    Stretch,
    Center,
    FlexStart,
    FlexEnd,
    SpaceBetween,
    SpaceAround,
    SpaceEvenly,
    Baseline,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct JustifyContentType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Center,
    FlexStart,
    FlexEnd,
    SpaceBetween,
    SpaceAround,
    SpaceEvenly,
    Start,
    End,
    Left,
    Right,
    Stretch,
    Baseline,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct LengthType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Undefined,
    Auto,
    Px,
    Vw,
    Vh,
    Rem,
    Rpx,
    Em,
    Ratio,
    Expr,
    Vmin,
    Vmax,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Px_Body {
    float _0;
  };

  struct Vw_Body {
    float _0;
  };

  struct Vh_Body {
    float _0;
  };

  struct Rem_Body {
    float _0;
  };

  struct Rpx_Body {
    float _0;
  };

  struct Em_Body {
    float _0;
  };

  struct Ratio_Body {
    float _0;
  };

  struct Expr_Body {
    LengthExpr _0;
  };

  struct Vmin_Body {
    float _0;
  };

  struct Vmax_Body {
    float _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Px_Body px;
    Vw_Body vw;
    Vh_Body vh;
    Rem_Body rem;
    Rpx_Body rpx;
    Em_Body em;
    Ratio_Body ratio;
    Expr_Body expr;
    Vmin_Body vmin;
    Vmax_Body vmax;
  };
};

struct JustifyItemsType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Stretch,
    Center,
    Start,
    End,
    FlexStart,
    FlexEnd,
    SelfStart,
    SelfEnd,
    Left,
    Right,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct GapType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Normal,
    Length,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Length_Body {
    Length _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Length_Body length;
  };
};

struct Color {
  enum class Tag {
    Undefined,
    CurrentColor,
    Specified,
  };

  struct Specified_Body {
    uint8_t _0;
    uint8_t _1;
    uint8_t _2;
    uint8_t _3;
  };

  Tag tag;
  union {
    Specified_Body specified;
  };
};

struct AngleOrPercentage {
  enum class Tag {
    Angle,
    Percentage,
  };

  struct Angle_Body {
    Angle _0;
  };

  struct Percentage_Body {
    float _0;
  };

  Tag tag;
  union {
    Angle_Body angle;
    Percentage_Body percentage;
  };
};

struct GradientColorItem {
  enum class Tag {
    ColorHint,
    SimpleColorHint,
    AngleOrPercentageColorHint,
  };

  struct ColorHint_Body {
    Color _0;
    Length _1;
  };

  struct SimpleColorHint_Body {
    Color _0;
  };

  struct AngleOrPercentageColorHint_Body {
    Color _0;
    AngleOrPercentage _1;
  };

  Tag tag;
  union {
    ColorHint_Body color_hint;
    SimpleColorHint_Body simple_color_hint;
    AngleOrPercentageColorHint_Body angle_or_percentage_color_hint;
  };
};

struct GradientSize {
  enum class Tag {
    FarthestCorner,
    ClosestSide,
    ClosestCorner,
    FarthestSide,
    Len,
  };

  struct Len_Body {
    Length _0;
    Length _1;
  };

  Tag tag;
  union {
    Len_Body len;
  };
};

struct GradientPosition {
  enum class Tag {
    Pos,
  };

  struct Pos_Body {
    Length _0;
    Length _1;
  };

  Tag tag;
  union {
    Pos_Body pos;
  };
};

struct ConicGradientItem {
  Angle angle;
  GradientPosition position;
  Array<GradientColorItem> items;
};

struct BackgroundImageGradientItem {
  enum class Tag {
    LinearGradient,
    RadialGradient,
    ConicGradient,
  };

  struct LinearGradient_Body {
    Angle _0;
    Array<GradientColorItem> _1;
  };

  struct RadialGradient_Body {
    GradientShape _0;
    GradientSize _1;
    GradientPosition _2;
    Array<GradientColorItem> _3;
  };

  struct ConicGradient_Body {
    ConicGradientItem _0;
  };

  Tag tag;
  union {
    LinearGradient_Body linear_gradient;
    RadialGradient_Body radial_gradient;
    ConicGradient_Body conic_gradient;
  };
};

struct ImageSource {
  enum class Tag {
    None,
    Url,
  };

  struct Url_Body {
    StrRef _0;
  };

  Tag tag;
  union {
    Url_Body url;
  };
};

struct BackgroundImageItem {
  enum class Tag {
    None,
    Url,
    Gradient,
    Image,
    Element,
  };

  struct Url_Body {
    StrRef _0;
  };

  struct Gradient_Body {
    BackgroundImageGradientItem _0;
  };

  struct Image_Body {
    ImageTags _0;
    ImageSource _1;
    Color _2;
  };

  struct Element_Body {
    StrRef _0;
  };

  Tag tag;
  union {
    Url_Body url;
    Gradient_Body gradient;
    Image_Body image;
    Element_Body element;
  };
};

struct BackgroundImageType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<BackgroundImageItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct BackgroundSizeItem {
  enum class Tag {
    Auto,
    Length,
    Cover,
    Contain,
  };

  struct Length_Body {
    Length _0;
    Length _1;
  };

  Tag tag;
  union {
    Length_Body length;
  };
};

struct BackgroundSizeType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<BackgroundSizeItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct BackgroundPositionValue {
  enum class Tag {
    Top,
    Bottom,
    Left,
    Right,
  };

  struct Top_Body {
    Length _0;
  };

  struct Bottom_Body {
    Length _0;
  };

  struct Left_Body {
    Length _0;
  };

  struct Right_Body {
    Length _0;
  };

  Tag tag;
  union {
    Top_Body top;
    Bottom_Body bottom;
    Left_Body left;
    Right_Body right;
  };
};

struct BackgroundPositionItem {
  enum class Tag {
    Pos,
    Value,
  };

  struct Pos_Body {
    BackgroundPositionValue _0;
    BackgroundPositionValue _1;
  };

  struct Value_Body {
    BackgroundPositionValue _0;
  };

  Tag tag;
  union {
    Pos_Body pos;
    Value_Body value;
  };
};

struct BackgroundPositionType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<BackgroundPositionItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct BackgroundRepeatItem {
  enum class Tag {
    Pos,
  };

  struct Pos_Body {
    BackgroundRepeatValue _0;
    BackgroundRepeatValue _1;
  };

  Tag tag;
  union {
    Pos_Body pos;
  };
};

struct BackgroundRepeatType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<BackgroundRepeatItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct BackgroundAttachmentType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<BackgroundAttachmentItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct BackgroundClipType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<BackgroundClipItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct BackgroundOriginType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<BackgroundOriginItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct MaskModeType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<MaskModeItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct BorderStyleType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    None,
    Solid,
    Dotted,
    Dashed,
    Hidden,
    Double,
    Groove,
    Ridge,
    Inset,
    Outset,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct ShadowItemType {
  enum class Tag {
    Inset,
    OffsetX,
    OffsetY,
    BlurRadius,
    SpreadRadius,
    Color,
  };

  struct OffsetX_Body {
    Length _0;
  };

  struct OffsetY_Body {
    Length _0;
  };

  struct BlurRadius_Body {
    Length _0;
  };

  struct SpreadRadius_Body {
    Length _0;
  };

  struct Color_Body {
    Color _0;
  };

  Tag tag;
  union {
    OffsetX_Body offset_x;
    OffsetY_Body offset_y;
    BlurRadius_Body blur_radius;
    SpreadRadius_Body spread_radius;
    Color_Body color;
  };
};

struct BoxShadowItem {
  enum class Tag {
    List,
  };

  struct List_Body {
    Array<ShadowItemType> _0;
  };

  Tag tag;
  union {
    List_Body list;
  };
};

struct BoxShadowType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    None,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<BoxShadowItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct BorderRadiusType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Pos,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Pos_Body {
    Length _0;
    Length _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Pos_Body pos;
  };
};

struct TransitionPropertyType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<TransitionPropertyItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct TransitionTimeType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
    ListI32,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<uint32_t> _0;
  };

  struct ListI32_Body {
    Array<int32_t> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
    ListI32_Body list_i32;
  };
};

struct TransitionTimingFnItem {
  enum class Tag {
    Linear,
    Ease,
    EaseIn,
    EaseOut,
    EaseInOut,
    StepStart,
    StepEnd,
    Steps,
    CubicBezier,
  };

  struct Steps_Body {
    int32_t _0;
    StepPosition _1;
  };

  struct CubicBezier_Body {
    float _0;
    float _1;
    float _2;
    float _3;
  };

  Tag tag;
  union {
    Steps_Body steps;
    CubicBezier_Body cubic_bezier;
  };
};

struct TransitionTimingFnType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<TransitionTimingFnItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct AnimationIterationCountItem {
  enum class Tag {
    Number,
    Infinite,
  };

  struct Number_Body {
    float _0;
  };

  Tag tag;
  union {
    Number_Body number;
  };
};

struct AnimationIterationCountType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<AnimationIterationCountItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct AnimationDirectionType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<AnimationDirectionItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct AnimationFillModeType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<AnimationFillModeItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct AnimationPlayStateType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<AnimationPlayStateItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct AnimationNameItem {
  enum class Tag {
    None,
    CustomIdent,
  };

  struct CustomIdent_Body {
    StrRef _0;
  };

  Tag tag;
  union {
    CustomIdent_Body custom_ident;
  };
};

struct AnimationNameType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<AnimationNameItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct AnimateableFeature {
  enum class Tag {
    Contents,
    ScrollPosition,
    CustomIdent,
  };

  struct CustomIdent_Body {
    StrRef _0;
  };

  Tag tag;
  union {
    CustomIdent_Body custom_ident;
  };
};

struct WillChangeType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Auto,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<AnimateableFeature> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct DirectionType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Auto,
    LTR,
    RTL,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct WritingModeType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    HorizontalTb,
    VerticalLr,
    VerticalRl,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct LineHeightType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Normal,
    Length,
    Num,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Length_Body {
    Length _0;
  };

  struct Num_Body {
    Number _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Length_Body length;
    Num_Body num;
  };
};

struct TextAlignType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Left,
    Center,
    Right,
    Justify,
    JustifyAll,
    Start,
    End,
    MatchParent,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct FontWeightType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Normal,
    Bold,
    Bolder,
    Lighter,
    Num,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Num_Body {
    Number _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Num_Body num;
  };
};

struct WordBreakType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    BreakWord,
    BreakAll,
    KeepAll,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct WhiteSpaceType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Normal,
    NoWrap,
    Pre,
    PreWrap,
    PreLine,
    WxPreEdit,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct TextOverflowType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Clip,
    Ellipsis,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct VerticalAlignType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Baseline,
    Top,
    Middle,
    Bottom,
    TextTop,
    TextBottom,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct LetterSpacingType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Normal,
    Length,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Length_Body {
    Length _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Length_Body length;
  };
};

struct WordSpacingType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Normal,
    Length,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Length_Body {
    Length _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Length_Body length;
  };
};

struct FontFamilyName {
  enum class Tag {
    Serif,
    SansSerif,
    Monospace,
    Cursive,
    Fantasy,
    Title,
    SystemUi,
  };

  struct Title_Body {
    StrRef _0;
  };

  Tag tag;
  union {
    Title_Body title;
  };
};

struct FontFamilyType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Names,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Names_Body {
    Array<FontFamilyName> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Names_Body names;
  };
};

struct FontStyleType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Normal,
    Italic,
    Oblique,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Oblique_Body {
    Angle _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Oblique_Body oblique;
  };
};

struct TextShadowItem {
  enum class Tag {
    TextShadowValue,
  };

  struct TextShadowValue_Body {
    Length _0;
    Length _1;
    Length _2;
    Color _3;
  };

  Tag tag;
  union {
    TextShadowValue_Body text_shadow_value;
  };
};

struct TextShadowType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    None,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<TextShadowItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct TextDecorationLineType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    None,
    SpellingError,
    GrammarError,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<TextDecorationLineItem> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct TextDecorationStyleType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Solid,
    Double,
    Dotted,
    Dashed,
    Wavy,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct TextDecorationThicknessType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Auto,
    FromFont,
    Length,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Length_Body {
    Length _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Length_Body length;
  };
};

struct FeatureTag {
  StrRef opentype_tag;
  Number value;
};

struct FontFeatureSettingsType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Normal,
    FeatureTags,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct FeatureTags_Body {
    Array<FeatureTag> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    FeatureTags_Body feature_tags;
  };
};

struct ListStyleTypeType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Disc,
    None,
    Circle,
    Square,
    Decimal,
    CjkDecimal,
    DecimalLeadingZero,
    LowerRoman,
    UpperRoman,
    LowerGreek,
    LowerAlpha,
    LowerLatin,
    UpperAlpha,
    UpperLatin,
    Armenian,
    Georgian,
    CustomIdent,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct CustomIdent_Body {
    StrRef _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    CustomIdent_Body custom_ident;
  };
};

struct ListStyleImageType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    None,
    Url,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Url_Body {
    StrRef _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Url_Body url;
  };
};

struct ListStylePositionType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Outside,
    Inside,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct DropShadow {
  enum class Tag {
    List,
  };

  struct List_Body {
    Array<ShadowItemType> _0;
  };

  Tag tag;
  union {
    List_Body list;
  };
};

struct FilterFunc {
  enum class Tag {
    Url,
    Blur,
    Brightness,
    Contrast,
    DropShadow,
    Grayscale,
    HueRotate,
    Invert,
    Opacity,
    Saturate,
    Sepia,
  };

  struct Url_Body {
    StrRef _0;
  };

  struct Blur_Body {
    Length _0;
  };

  struct Brightness_Body {
    Length _0;
  };

  struct Contrast_Body {
    Length _0;
  };

  struct DropShadow_Body {
    DropShadow _0;
  };

  struct Grayscale_Body {
    Length _0;
  };

  struct HueRotate_Body {
    Angle _0;
  };

  struct Invert_Body {
    Length _0;
  };

  struct Opacity_Body {
    Length _0;
  };

  struct Saturate_Body {
    Length _0;
  };

  struct Sepia_Body {
    Length _0;
  };

  Tag tag;
  union {
    Url_Body url;
    Blur_Body blur;
    Brightness_Body brightness;
    Contrast_Body contrast;
    DropShadow_Body drop_shadow;
    Grayscale_Body grayscale;
    HueRotate_Body hue_rotate;
    Invert_Body invert;
    Opacity_Body opacity;
    Saturate_Body saturate;
    Sepia_Body sepia;
  };
};

struct BackdropFilterType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    None,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<FilterFunc> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct FilterType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    None,
    List,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct List_Body {
    Array<FilterFunc> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    List_Body list;
  };
};

struct TransformOriginType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    LengthTuple,
    Left,
    Right,
    Center,
    Bottom,
    Top,
    Length,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct LengthTuple_Body {
    Length _0;
    Length _1;
    Length _2;
  };

  struct Length_Body {
    Length _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    LengthTuple_Body length_tuple;
    Length_Body length;
  };
};

struct AspectRatioType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Auto,
    Ratio,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Ratio_Body {
    Number _0;
    Number _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Ratio_Body ratio;
  };
};

struct ContainType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    None,
    Strict,
    Content,
    Multiple,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Multiple_Body {
    Array<ContainKeyword> _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Multiple_Body multiple;
  };
};

struct ContentType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    None,
    Normal,
    Str,
    Url,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Str_Body {
    StrRef _0;
  };

  struct Url_Body {
    StrRef _0;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Str_Body str;
    Url_Body url;
  };
};

struct ScrollbarType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    Auto,
    Hidden,
    AutoHide,
    AlwaysShow,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
  };
};

struct CustomPropertyType {
  enum class Tag {
    Invalid,
    Initial,
    Inherit,
    Unset,
    Var,
    VarInShorthand,
    Invalid0,
    Invalid7,
    Invalid8,
    Invalid9,
    InvalidA,
    InvalidB,
    InvalidC,
    InvalidD,
    InvalidE,
    InvalidF,
    Invalid10,
    Invalid11,
    Invalid12,
    Invalid13,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    Invalid21,
    Invalid22,
    Invalid23,
    Invalid24,
    Invalid25,
    Invalid26,
    Invalid27,
    Invalid28,
    Invalid29,
    Invalid2A,
    Invalid2B,
    Invalid2C,
    Invalid2D,
    Invalid2E,
    Invalid2F,
    Invalid30,
    Invalid31,
    Invalid32,
    Invalid33,
    Invalid34,
    Invalid35,
    Invalid36,
    Invalid37,
    Invalid38,
    Invalid39,
    Invalid3A,
    Invalid3B,
    Invalid3C,
    Invalid3D,
    Invalid3E,
    Invalid3F,
    None,
    Expr,
  };

  struct Var_Body {
    Box<StrRef> _0;
  };

  struct VarInShorthand_Body {
    Box<StrRef> _0;
    Box<StrRef> _1;
  };

  struct Expr_Body {
    StrRef _0;
    StrRef _1;
  };

  Tag tag;
  union {
    Var_Body var;
    VarInShorthand_Body var_in_shorthand;
    Expr_Body expr;
  };
};

struct Property {
  enum class Tag {
    Unknown,
    Display,
    Position,
    OverflowX,
    OverflowY,
    PointerEvents,
    WxEngineTouchEvent,
    WxPartialZIndex,
    BoxSizing,
    Transform,
    WxLineClamp,
    Float,
    OverflowWrap,
    Resize,
    ZIndex,
    WxPointerEventRoot,
    Visibility,
    Color,
    Opacity,
    Invalid14,
    Invalid15,
    Invalid16,
    Invalid17,
    Invalid18,
    Invalid19,
    Invalid1A,
    Invalid1B,
    Invalid1C,
    Invalid1D,
    Invalid1E,
    Invalid1F,
    Invalid20,
    FlexDirection,
    FlexWrap,
    AlignItems,
    AlignSelf,
    AlignContent,
    JustifyContent,
    FlexGrow,
    FlexShrink,
    FlexBasis,
    JustifyItems,
    Order,
    RowGap,
    ColumnGap,
    Invalid2E,
    Invalid2F,
    Invalid30,
    BackgroundColor,
    BackgroundImage,
    BackgroundSize,
    BackgroundPosition,
    BackgroundRepeat,
    BackgroundAttachment,
    BackgroundClip,
    BackgroundOrigin,
    BackgroundPositionX,
    BackgroundPositionY,
    MaskSize,
    MaskRepeat,
    MaskOrigin,
    MaskClip,
    MaskPosition,
    MaskMode,
    Width,
    Height,
    MinWidth,
    MinHeight,
    MaxWidth,
    MaxHeight,
    Left,
    Right,
    Top,
    Bottom,
    Invalid4B,
    Invalid4C,
    Invalid4D,
    Invalid4E,
    Invalid4F,
    Invalid50,
    PaddingLeft,
    PaddingRight,
    PaddingTop,
    PaddingBottom,
    MarginLeft,
    MarginRight,
    MarginTop,
    MarginBottom,
    MaskPositionX,
    MaskPositionY,
    Invalid5B,
    Invalid5C,
    Invalid5D,
    Invalid5E,
    Invalid5F,
    Invalid60,
    BorderLeftWidth,
    BorderLeftStyle,
    BorderLeftColor,
    BorderRightWidth,
    BorderRightStyle,
    BorderRightColor,
    BorderTopWidth,
    BorderTopStyle,
    BorderTopColor,
    BorderBottomWidth,
    BorderBottomStyle,
    BorderBottomColor,
    BoxShadow,
    Invalid6E,
    Invalid6F,
    Invalid70,
    BorderTopLeftRadius,
    BorderTopRightRadius,
    BorderBottomRightRadius,
    BorderBottomLeftRadius,
    Invalid75,
    Invalid76,
    Invalid77,
    Invalid78,
    Invalid79,
    Invalid7A,
    Invalid7B,
    Invalid7C,
    Invalid7D,
    Invalid7E,
    Invalid7F,
    Invalid80,
    TransitionProperty,
    TransitionDuration,
    TransitionTimingFunction,
    TransitionDelay,
    AnimationDuration,
    AnimationTimingFunction,
    AnimationDelay,
    AnimationIterationCount,
    AnimationDirection,
    AnimationFillMode,
    AnimationPlayState,
    AnimationName,
    WillChange,
    Invalid8E,
    Invalid8F,
    Invalid90,
    FontSize,
    Direction,
    WritingMode,
    LineHeight,
    TextAlign,
    FontWeight,
    WordBreak,
    WhiteSpace,
    TextOverflow,
    TextIndent,
    VerticalAlign,
    LetterSpacing,
    WordSpacing,
    FontFamily,
    FontStyle,
    TextShadow,
    TextDecorationLine,
    TextDecorationStyle,
    TextDecorationColor,
    TextDecorationThickness,
    FontFeatureSettings,
    InvalidA6,
    InvalidA7,
    InvalidA8,
    InvalidA9,
    InvalidAA,
    InvalidAB,
    InvalidAC,
    InvalidAD,
    InvalidAE,
    InvalidAF,
    InvalidB0,
    InvalidB1,
    InvalidB2,
    InvalidB3,
    InvalidB4,
    InvalidB5,
    InvalidB6,
    InvalidB7,
    InvalidB8,
    InvalidB9,
    InvalidBA,
    InvalidBB,
    InvalidBC,
    InvalidBD,
    InvalidBE,
    InvalidBF,
    InvalidC0,
    InvalidC1,
    InvalidC2,
    InvalidC3,
    InvalidC4,
    InvalidC5,
    InvalidC6,
    InvalidC7,
    InvalidC8,
    InvalidC9,
    InvalidCA,
    InvalidCB,
    InvalidCC,
    InvalidCD,
    InvalidCE,
    InvalidCF,
    InvalidD0,
    ListStyleType,
    ListStyleImage,
    ListStylePosition,
    BackdropFilter,
    Filter,
    TransformOrigin,
    MaskImage,
    AspectRatio,
    Contain,
    Content,
    InvalidDB,
    InvalidDC,
    InvalidDD,
    InvalidDE,
    InvalidDF,
    InvalidE0,
    WxScrollbarX,
    WxScrollbarXColor,
    WxScrollbarY,
    WxScrollbarYColor,
    WxPaintingPixelRatio,
    WxContain,
    InvalidE7,
    InvalidE8,
    InvalidE9,
    InvalidEA,
    InvalidEB,
    InvalidEC,
    InvalidED,
    InvalidEE,
    InvalidEF,
    InvalidF0,
    InvalidF1,
    InvalidF2,
    InvalidF3,
    InvalidF4,
    InvalidF5,
    InvalidF6,
    InvalidF7,
    InvalidF8,
    InvalidF9,
    InvalidFA,
    CustomProperty,
  };

  struct Display_Body {
    DisplayType _0;
  };

  struct Position_Body {
    PositionType _0;
  };

  struct OverflowX_Body {
    OverflowType _0;
  };

  struct OverflowY_Body {
    OverflowType _0;
  };

  struct PointerEvents_Body {
    PointerEventsType _0;
  };

  struct WxEngineTouchEvent_Body {
    WxEngineTouchEventType _0;
  };

  struct WxPartialZIndex_Body {
    NumberType _0;
  };

  struct BoxSizing_Body {
    BoxSizingType _0;
  };

  struct Transform_Body {
    TransformType _0;
  };

  struct WxLineClamp_Body {
    NumberType _0;
  };

  struct Float_Body {
    FloatType _0;
  };

  struct OverflowWrap_Body {
    OverflowWrapType _0;
  };

  struct Resize_Body {
    ResizeType _0;
  };

  struct ZIndex_Body {
    ZIndexType _0;
  };

  struct WxPointerEventRoot_Body {
    PointerEventsType _0;
  };

  struct Visibility_Body {
    VisibilityType _0;
  };

  struct Color_Body {
    ColorType _0;
  };

  struct Opacity_Body {
    NumberType _0;
  };

  struct FlexDirection_Body {
    FlexDirectionType _0;
  };

  struct FlexWrap_Body {
    FlexWrapType _0;
  };

  struct AlignItems_Body {
    AlignItemsType _0;
  };

  struct AlignSelf_Body {
    AlignSelfType _0;
  };

  struct AlignContent_Body {
    AlignContentType _0;
  };

  struct JustifyContent_Body {
    JustifyContentType _0;
  };

  struct FlexGrow_Body {
    NumberType _0;
  };

  struct FlexShrink_Body {
    NumberType _0;
  };

  struct FlexBasis_Body {
    LengthType _0;
  };

  struct JustifyItems_Body {
    JustifyItemsType _0;
  };

  struct Order_Body {
    NumberType _0;
  };

  struct RowGap_Body {
    GapType _0;
  };

  struct ColumnGap_Body {
    GapType _0;
  };

  struct BackgroundColor_Body {
    ColorType _0;
  };

  struct BackgroundImage_Body {
    BackgroundImageType _0;
  };

  struct BackgroundSize_Body {
    BackgroundSizeType _0;
  };

  struct BackgroundPosition_Body {
    BackgroundPositionType _0;
  };

  struct BackgroundRepeat_Body {
    BackgroundRepeatType _0;
  };

  struct BackgroundAttachment_Body {
    BackgroundAttachmentType _0;
  };

  struct BackgroundClip_Body {
    BackgroundClipType _0;
  };

  struct BackgroundOrigin_Body {
    BackgroundOriginType _0;
  };

  struct BackgroundPositionX_Body {
    BackgroundPositionType _0;
  };

  struct BackgroundPositionY_Body {
    BackgroundPositionType _0;
  };

  struct MaskSize_Body {
    BackgroundSizeType _0;
  };

  struct MaskRepeat_Body {
    BackgroundRepeatType _0;
  };

  struct MaskOrigin_Body {
    BackgroundOriginType _0;
  };

  struct MaskClip_Body {
    BackgroundClipType _0;
  };

  struct MaskPosition_Body {
    BackgroundPositionType _0;
  };

  struct MaskMode_Body {
    MaskModeType _0;
  };

  struct Width_Body {
    LengthType _0;
  };

  struct Height_Body {
    LengthType _0;
  };

  struct MinWidth_Body {
    LengthType _0;
  };

  struct MinHeight_Body {
    LengthType _0;
  };

  struct MaxWidth_Body {
    LengthType _0;
  };

  struct MaxHeight_Body {
    LengthType _0;
  };

  struct Left_Body {
    LengthType _0;
  };

  struct Right_Body {
    LengthType _0;
  };

  struct Top_Body {
    LengthType _0;
  };

  struct Bottom_Body {
    LengthType _0;
  };

  struct PaddingLeft_Body {
    LengthType _0;
  };

  struct PaddingRight_Body {
    LengthType _0;
  };

  struct PaddingTop_Body {
    LengthType _0;
  };

  struct PaddingBottom_Body {
    LengthType _0;
  };

  struct MarginLeft_Body {
    LengthType _0;
  };

  struct MarginRight_Body {
    LengthType _0;
  };

  struct MarginTop_Body {
    LengthType _0;
  };

  struct MarginBottom_Body {
    LengthType _0;
  };

  struct MaskPositionX_Body {
    BackgroundPositionType _0;
  };

  struct MaskPositionY_Body {
    BackgroundPositionType _0;
  };

  struct BorderLeftWidth_Body {
    LengthType _0;
  };

  struct BorderLeftStyle_Body {
    BorderStyleType _0;
  };

  struct BorderLeftColor_Body {
    ColorType _0;
  };

  struct BorderRightWidth_Body {
    LengthType _0;
  };

  struct BorderRightStyle_Body {
    BorderStyleType _0;
  };

  struct BorderRightColor_Body {
    ColorType _0;
  };

  struct BorderTopWidth_Body {
    LengthType _0;
  };

  struct BorderTopStyle_Body {
    BorderStyleType _0;
  };

  struct BorderTopColor_Body {
    ColorType _0;
  };

  struct BorderBottomWidth_Body {
    LengthType _0;
  };

  struct BorderBottomStyle_Body {
    BorderStyleType _0;
  };

  struct BorderBottomColor_Body {
    ColorType _0;
  };

  struct BoxShadow_Body {
    BoxShadowType _0;
  };

  struct BorderTopLeftRadius_Body {
    BorderRadiusType _0;
  };

  struct BorderTopRightRadius_Body {
    BorderRadiusType _0;
  };

  struct BorderBottomRightRadius_Body {
    BorderRadiusType _0;
  };

  struct BorderBottomLeftRadius_Body {
    BorderRadiusType _0;
  };

  struct TransitionProperty_Body {
    TransitionPropertyType _0;
  };

  struct TransitionDuration_Body {
    TransitionTimeType _0;
  };

  struct TransitionTimingFunction_Body {
    TransitionTimingFnType _0;
  };

  struct TransitionDelay_Body {
    TransitionTimeType _0;
  };

  struct AnimationDuration_Body {
    TransitionTimeType _0;
  };

  struct AnimationTimingFunction_Body {
    TransitionTimingFnType _0;
  };

  struct AnimationDelay_Body {
    TransitionTimeType _0;
  };

  struct AnimationIterationCount_Body {
    AnimationIterationCountType _0;
  };

  struct AnimationDirection_Body {
    AnimationDirectionType _0;
  };

  struct AnimationFillMode_Body {
    AnimationFillModeType _0;
  };

  struct AnimationPlayState_Body {
    AnimationPlayStateType _0;
  };

  struct AnimationName_Body {
    AnimationNameType _0;
  };

  struct WillChange_Body {
    WillChangeType _0;
  };

  struct FontSize_Body {
    LengthType _0;
  };

  struct Direction_Body {
    DirectionType _0;
  };

  struct WritingMode_Body {
    WritingModeType _0;
  };

  struct LineHeight_Body {
    LineHeightType _0;
  };

  struct TextAlign_Body {
    TextAlignType _0;
  };

  struct FontWeight_Body {
    FontWeightType _0;
  };

  struct WordBreak_Body {
    WordBreakType _0;
  };

  struct WhiteSpace_Body {
    WhiteSpaceType _0;
  };

  struct TextOverflow_Body {
    TextOverflowType _0;
  };

  struct TextIndent_Body {
    LengthType _0;
  };

  struct VerticalAlign_Body {
    VerticalAlignType _0;
  };

  struct LetterSpacing_Body {
    LetterSpacingType _0;
  };

  struct WordSpacing_Body {
    WordSpacingType _0;
  };

  struct FontFamily_Body {
    FontFamilyType _0;
  };

  struct FontStyle_Body {
    FontStyleType _0;
  };

  struct TextShadow_Body {
    TextShadowType _0;
  };

  struct TextDecorationLine_Body {
    TextDecorationLineType _0;
  };

  struct TextDecorationStyle_Body {
    TextDecorationStyleType _0;
  };

  struct TextDecorationColor_Body {
    ColorType _0;
  };

  struct TextDecorationThickness_Body {
    TextDecorationThicknessType _0;
  };

  struct FontFeatureSettings_Body {
    FontFeatureSettingsType _0;
  };

  struct ListStyleType_Body {
    ListStyleTypeType _0;
  };

  struct ListStyleImage_Body {
    ListStyleImageType _0;
  };

  struct ListStylePosition_Body {
    ListStylePositionType _0;
  };

  struct BackdropFilter_Body {
    BackdropFilterType _0;
  };

  struct Filter_Body {
    FilterType _0;
  };

  struct TransformOrigin_Body {
    TransformOriginType _0;
  };

  struct MaskImage_Body {
    BackgroundImageType _0;
  };

  struct AspectRatio_Body {
    AspectRatioType _0;
  };

  struct Contain_Body {
    ContainType _0;
  };

  struct Content_Body {
    ContentType _0;
  };

  struct WxScrollbarX_Body {
    ScrollbarType _0;
  };

  struct WxScrollbarXColor_Body {
    ColorType _0;
  };

  struct WxScrollbarY_Body {
    ScrollbarType _0;
  };

  struct WxScrollbarYColor_Body {
    ColorType _0;
  };

  struct WxPaintingPixelRatio_Body {
    NumberType _0;
  };

  struct WxContain_Body {
    ContainType _0;
  };

  struct CustomProperty_Body {
    CustomPropertyType _0;
  };

  Tag tag;
  union {
    Display_Body display;
    Position_Body position;
    OverflowX_Body overflow_x;
    OverflowY_Body overflow_y;
    PointerEvents_Body pointer_events;
    WxEngineTouchEvent_Body wx_engine_touch_event;
    WxPartialZIndex_Body wx_partial_z_index;
    BoxSizing_Body box_sizing;
    Transform_Body transform;
    WxLineClamp_Body wx_line_clamp;
    Float_Body float_;
    OverflowWrap_Body overflow_wrap;
    Resize_Body resize;
    ZIndex_Body z_index;
    WxPointerEventRoot_Body wx_pointer_event_root;
    Visibility_Body visibility;
    Color_Body color;
    Opacity_Body opacity;
    FlexDirection_Body flex_direction;
    FlexWrap_Body flex_wrap;
    AlignItems_Body align_items;
    AlignSelf_Body align_self;
    AlignContent_Body align_content;
    JustifyContent_Body justify_content;
    FlexGrow_Body flex_grow;
    FlexShrink_Body flex_shrink;
    FlexBasis_Body flex_basis;
    JustifyItems_Body justify_items;
    Order_Body order;
    RowGap_Body row_gap;
    ColumnGap_Body column_gap;
    BackgroundColor_Body background_color;
    BackgroundImage_Body background_image;
    BackgroundSize_Body background_size;
    BackgroundPosition_Body background_position;
    BackgroundRepeat_Body background_repeat;
    BackgroundAttachment_Body background_attachment;
    BackgroundClip_Body background_clip;
    BackgroundOrigin_Body background_origin;
    BackgroundPositionX_Body background_position_x;
    BackgroundPositionY_Body background_position_y;
    MaskSize_Body mask_size;
    MaskRepeat_Body mask_repeat;
    MaskOrigin_Body mask_origin;
    MaskClip_Body mask_clip;
    MaskPosition_Body mask_position;
    MaskMode_Body mask_mode;
    Width_Body width;
    Height_Body height;
    MinWidth_Body min_width;
    MinHeight_Body min_height;
    MaxWidth_Body max_width;
    MaxHeight_Body max_height;
    Left_Body left;
    Right_Body right;
    Top_Body top;
    Bottom_Body bottom;
    PaddingLeft_Body padding_left;
    PaddingRight_Body padding_right;
    PaddingTop_Body padding_top;
    PaddingBottom_Body padding_bottom;
    MarginLeft_Body margin_left;
    MarginRight_Body margin_right;
    MarginTop_Body margin_top;
    MarginBottom_Body margin_bottom;
    MaskPositionX_Body mask_position_x;
    MaskPositionY_Body mask_position_y;
    BorderLeftWidth_Body border_left_width;
    BorderLeftStyle_Body border_left_style;
    BorderLeftColor_Body border_left_color;
    BorderRightWidth_Body border_right_width;
    BorderRightStyle_Body border_right_style;
    BorderRightColor_Body border_right_color;
    BorderTopWidth_Body border_top_width;
    BorderTopStyle_Body border_top_style;
    BorderTopColor_Body border_top_color;
    BorderBottomWidth_Body border_bottom_width;
    BorderBottomStyle_Body border_bottom_style;
    BorderBottomColor_Body border_bottom_color;
    BoxShadow_Body box_shadow;
    BorderTopLeftRadius_Body border_top_left_radius;
    BorderTopRightRadius_Body border_top_right_radius;
    BorderBottomRightRadius_Body border_bottom_right_radius;
    BorderBottomLeftRadius_Body border_bottom_left_radius;
    TransitionProperty_Body transition_property;
    TransitionDuration_Body transition_duration;
    TransitionTimingFunction_Body transition_timing_function;
    TransitionDelay_Body transition_delay;
    AnimationDuration_Body animation_duration;
    AnimationTimingFunction_Body animation_timing_function;
    AnimationDelay_Body animation_delay;
    AnimationIterationCount_Body animation_iteration_count;
    AnimationDirection_Body animation_direction;
    AnimationFillMode_Body animation_fill_mode;
    AnimationPlayState_Body animation_play_state;
    AnimationName_Body animation_name;
    WillChange_Body will_change;
    FontSize_Body font_size;
    Direction_Body direction;
    WritingMode_Body writing_mode;
    LineHeight_Body line_height;
    TextAlign_Body text_align;
    FontWeight_Body font_weight;
    WordBreak_Body word_break;
    WhiteSpace_Body white_space;
    TextOverflow_Body text_overflow;
    TextIndent_Body text_indent;
    VerticalAlign_Body vertical_align;
    LetterSpacing_Body letter_spacing;
    WordSpacing_Body word_spacing;
    FontFamily_Body font_family;
    FontStyle_Body font_style;
    TextShadow_Body text_shadow;
    TextDecorationLine_Body text_decoration_line;
    TextDecorationStyle_Body text_decoration_style;
    TextDecorationColor_Body text_decoration_color;
    TextDecorationThickness_Body text_decoration_thickness;
    FontFeatureSettings_Body font_feature_settings;
    ListStyleType_Body list_style_type;
    ListStyleImage_Body list_style_image;
    ListStylePosition_Body list_style_position;
    BackdropFilter_Body backdrop_filter;
    Filter_Body filter;
    TransformOrigin_Body transform_origin;
    MaskImage_Body mask_image;
    AspectRatio_Body aspect_ratio;
    Contain_Body contain;
    Content_Body content;
    WxScrollbarX_Body wx_scrollbar_x;
    WxScrollbarXColor_Body wx_scrollbar_x_color;
    WxScrollbarY_Body wx_scrollbar_y;
    WxScrollbarYColor_Body wx_scrollbar_y_color;
    WxPaintingPixelRatio_Body wx_painting_pixel_ratio;
    WxContain_Body wx_contain;
    CustomProperty_Body custom_property;
  };
};

struct ImportantBitSet {
  enum class Tag {
    None,
    Array,
  };

  struct Array_Body {
    Array<uint8_t> _0;
  };

  Tag tag;
  union {
    Array_Body array;
  };
};

struct InlineRule {
  Array<Property> properties;
  ImportantBitSet important;
};

struct ColorValue {
  uint8_t red;
  uint8_t green;
  uint8_t blue;
  uint8_t alpha;
};

using CCharPtr = const char*;

struct SelectorRelationType {
  enum class Tag {
    None,
    Invalid,
    Ancestor,
    DirectParent,
    NextSibling,
    SubsequentSibling,
  };

  struct Ancestor_Body {
    Box<SelectorFragment> _0;
  };

  struct DirectParent_Body {
    Box<SelectorFragment> _0;
  };

  struct NextSibling_Body {
    Box<SelectorFragment> _0;
  };

  struct SubsequentSibling_Body {
    Box<SelectorFragment> _0;
  };

  Tag tag;
  union {
    Ancestor_Body ancestor;
    DirectParent_Body direct_parent;
    NextSibling_Body next_sibling;
    SubsequentSibling_Body subsequent_sibling;
  };
};

template<typename T>
struct Nullable {
  bool non_null;
  T data;
};

struct PseudoClassesType {
  enum class Tag {
    None,
    Invalid,
    Host,
    FirstChild,
    LastChild,
    Empty,
    NotExpr,
    OnlyChild,
    NthChild,
    NthOfType,
  };

  struct NotExpr_Body {
    Array<SelectorFragment> _0;
  };

  struct NthChild_Body {
    int32_t _0;
    int32_t _1;
    Nullable<Box<Array<SelectorFragment> >> _2;
  };

  struct NthOfType_Body {
    int32_t _0;
    int32_t _1;
  };

  Tag tag;
  union {
    NotExpr_Body not_expr;
    NthChild_Body nth_child;
    NthOfType_Body nth_of_type;
  };
};

struct AttributeType {
  AttributeOperator operator_;
  AttributeFlags case_insensitive;
  bool never_matches;
  StrRef name;
  Nullable<StrRef> value;
};

template<typename T>
struct NullablePtr {
  T *ptr;
};

struct SelectorFragment {
  StrRef tag_name;
  StrRef id;
  Array<StrRef> classes;
  SelectorRelationType relation;
  PseudoClassesType pseudo_classes;
  PseudoElementsType pseudo_elements;
  NullablePtr<Array<AttributeType> > attributes;
};

struct Selector {
  Array<SelectorFragment> fragments;
  uint16_t max_weight;
};

struct StrBuffer {
  void *ptr;
};

struct MediaExpression {
  enum class Tag {
    Unknown,
    MediaType,
    Orientation,
    Width,
    MinWidth,
    MaxWidth,
    Height,
    MinHeight,
    MaxHeight,
    Theme,
  };

  struct MediaType_Body {
    MediaType _0;
  };

  struct Orientation_Body {
    Orientation _0;
  };

  struct Width_Body {
    float _0;
  };

  struct MinWidth_Body {
    float _0;
  };

  struct MaxWidth_Body {
    float _0;
  };

  struct Height_Body {
    float _0;
  };

  struct MinHeight_Body {
    float _0;
  };

  struct MaxHeight_Body {
    float _0;
  };

  struct Theme_Body {
    Theme _0;
  };

  Tag tag;
  union {
    MediaType_Body media_type;
    Orientation_Body orientation;
    Width_Body width;
    MinWidth_Body min_width;
    MaxWidth_Body max_width;
    Height_Body height;
    MinHeight_Body min_height;
    MaxHeight_Body max_height;
    Theme_Body theme;
  };
};

struct MediaQuery {
  MediaTypeDecorator decorator;
  Array<MediaExpression> cond;
};

struct Media {
  Nullable<size_t> parent_index;
  Array<MediaQuery> media_queries;
};

struct Rule {
  Selector selector;
  Array<Property> properties;
  Nullable<size_t> media_index;
  ImportantBitSet important;
};

struct FontUrl {
  Box<StrRef> url;
  Nullable<Array<StrRef> > format;
};

struct FontSrc {
  enum class Tag {
    Local,
    Url,
  };

  struct Local_Body {
    FontFamilyName _0;
  };

  struct Url_Body {
    FontUrl _0;
  };

  Tag tag;
  union {
    Local_Body local;
    Url_Body url;
  };
};

struct FontFace {
  FontFamilyName font_family;
  Array<FontSrc> src;
  Nullable<FontStyleType> font_style;
  Nullable<FontWeightType> font_weight;
  Nullable<FontDisplay> font_display;
};

struct KeyFrame {
  enum class Tag {
    From,
    To,
    Ratio,
  };

  struct Ratio_Body {
    float _0;
  };

  Tag tag;
  union {
    Ratio_Body ratio;
  };
};

struct KeyFrameRule {
  Array<KeyFrame> keyframe;
  Array<Property> properties;
};

struct KeyFrames {
  StrRef ident;
  Array<KeyFrameRule> keyframes;
};

struct StyleSheetV1 {
  StrBuffer buf;
  Array<StrRef> imports;
  Array<Nullable<Media> > imports_media;
  Array<Rule> rules;
  Array<Media> media;
  Box<StrRef> version;
  Array<FontFace> font_face;
  Array<KeyFrames> keyframes;
};

struct StyleSheet {
  enum class Tag {
    None,
    V1,
  };

  struct V1_Body {
    StyleSheetV1 _0;
  };

  Tag tag;
  union {
    V1_Body v1;
  };
};

using RawMutPtr = void*;

using StyleSheetImportIndexPtr = RawMutPtr;

using StyleSheetResourcePtr = RawMutPtr;

struct CParserHooksContext {
  void *inner;
};

struct CParserHooks {
  void (*parsed_property)(CParserHooksContext, Property*);
};

using CustomPropertyGetter = const char*(*)(void *map, const char *name);

using CustomPropertySetter = void(*)(void *map, const char *name, const char *value);


extern "C" {

FfiResult<NullPtr> FPArrayStrRefFree(Array<StrRef> *x);

FfiResult<NullPtr> FPArrayWarningFree(Array<Warning> *warnings);

FfiResult<NullPtr> FPBufferFree(BufferPtr buffer_ptr, size_t buffer_len);

FfiResult<StrRef*> FPCssParserVersion();

FfiResult<NullPtr> FPInlineStyleFree(InlineRule *inline_rule);

FfiResult<ColorValue> FPParseColorFromString(CCharPtr source);

FfiResult<InlineRule*> FPParseInlineStyle(CCharPtr inline_style_text_ptr,
                                          Array<Warning> **warnings);

FfiResult<Selector*> FPParseSelectorFromString(CCharPtr selector_text_ptr);

FfiResult<StyleSheet*> FPParseStyleSheetFromString(CCharPtr style_text_ptr);

FfiResult<NullPtr> FPSelectorFree(Selector *selector);

FfiResult<NullPtr> FPStrFree(CCharPtr ptr);

FfiResult<StrRef*> FPStyleSheetBincodeVersion(BufferPtr buffer_ptr, size_t buffer_len);

FfiResult<NullPtr> FPStyleSheetFree(StyleSheet *style_sheet);

FfiResult<NullPtr> FPStyleSheetImportIndexAddBincode(StyleSheetImportIndexPtr this_,
                                                     CCharPtr path,
                                                     BufferPtr buffer_ptr,
                                                     size_t buffer_len,
                                                     void (*drop_fn)(RawMutPtr),
                                                     RawMutPtr drop_args,
                                                     Array<Warning> **warnings);

FfiResult<StyleSheetImportIndexPtr> FPStyleSheetImportIndexDeserializeBincode(BufferPtr buffer_ptr,
                                                                              size_t buffer_len,
                                                                              void (*drop_fn)(RawMutPtr),
                                                                              RawMutPtr drop_args);

FfiResult<StyleSheetImportIndexPtr> FPStyleSheetImportIndexDeserializeJson(CCharPtr json);

FfiResult<NullPtr> FPStyleSheetImportIndexFree(StyleSheetImportIndexPtr this_);

FfiResult<StyleSheet*> FPStyleSheetImportIndexGetStyleSheet(StyleSheetImportIndexPtr this_,
                                                            CCharPtr path);

FfiResult<Array<StrRef>*> FPStyleSheetImportIndexListDependencies(StyleSheetImportIndexPtr this_,
                                                                  CCharPtr path);

FfiResult<Array<StrRef>*> FPStyleSheetImportIndexListDependency(StyleSheetImportIndexPtr this_,
                                                                CCharPtr path);

FfiResult<NullPtr> FPStyleSheetImportIndexMergeBincode(StyleSheetImportIndexPtr this_,
                                                       BufferPtr buffer_ptr,
                                                       size_t buffer_len,
                                                       void (*drop_fn)(void*),
                                                       void *drop_args);

FfiResult<StyleSheetImportIndexPtr> FPStyleSheetImportIndexNew();

FfiResult<Array<StrRef>*> FPStyleSheetImportIndexQueryAndMarkDependencies(StyleSheetImportIndexPtr this_,
                                                                          CCharPtr path);

FfiResult<NullPtr> FPStyleSheetImportIndexRemoveBincode(StyleSheetImportIndexPtr this_,
                                                        CCharPtr path);

FfiResult<BufferPtr> FPStyleSheetImportIndexSerializeBincode(StyleSheetImportIndexPtr this_,
                                                             size_t *ret_buffer_len);

FfiResult<BufferPtr> FPStyleSheetImportIndexSerializeJson(StyleSheetImportIndexPtr this_,
                                                          size_t *ret_buffer_len);

FfiResult<NullPtr> FPStyleSheetResourceAddBincode(StyleSheetResourcePtr this_,
                                                  CCharPtr path,
                                                  BufferPtr buffer_ptr,
                                                  size_t buffer_len,
                                                  void (*drop_fn)(RawMutPtr),
                                                  RawMutPtr drop_args,
                                                  Array<Warning> **warnings);

FfiResult<NullPtr> FPStyleSheetResourceAddSource(StyleSheetResourcePtr this_,
                                                 CCharPtr path,
                                                 CCharPtr source,
                                                 Array<Warning> **warnings);

FfiResult<NullPtr> FPStyleSheetResourceAddSourceWithHooks(StyleSheetResourcePtr this_,
                                                          CParserHooks hooks,
                                                          CCharPtr path,
                                                          CCharPtr source,
                                                          Array<Warning> **warnings);

FfiResult<NullPtr> FPStyleSheetResourceAddTagNamePrefix(StyleSheetResourcePtr this_,
                                                        CCharPtr path,
                                                        CCharPtr prefix);

FfiResult<Array<StrRef>*> FPStyleSheetResourceDirectDependencies(StyleSheetResourcePtr this_,
                                                                 CCharPtr path);

FfiResult<NullPtr> FPStyleSheetResourceFree(StyleSheetResourcePtr this_);

FfiResult<StyleSheetImportIndexPtr> FPStyleSheetResourceGenerateImportIndex(StyleSheetResourcePtr this_);

FfiResult<StyleSheetResourcePtr> FPStyleSheetResourceNew();

FfiResult<BufferPtr> FPStyleSheetResourceSerializeBincode(StyleSheetResourcePtr this_,
                                                          CCharPtr path,
                                                          size_t *ret_buffer_len);

FfiResult<BufferPtr> FPStyleSheetResourceSerializeJson(StyleSheetResourcePtr this_,
                                                       CCharPtr path,
                                                       size_t *ret_buffer_len);

FfiResult<CCharPtr> FPSubstituteVariable(CCharPtr expr_ptr,
                                         RawMutPtr map,
                                         CustomPropertyGetter getter,
                                         CustomPropertySetter setter);

FfiResult<NullPtr> generate_warning(CParserHooksContext *self, const char *message);

size_t str_len(const StrRef *self);

const uint8_t *str_ptr(const StrRef *self);

}  // extern "C"

}  // namespace float_pigment
